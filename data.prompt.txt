# üìö API CLIENT GUIDE - LIVESTREAM PLATFORM

## üåü T·ªïng quan

ƒê√¢y l√† h∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ t·∫•t c·∫£ API endpoints d√†nh cho client trong h·ªá th·ªëng livestream platform. T√†i li·ªáu n√†y bao g·ªìm:

- **Authentication & Authorization**
- **T·∫•t c·∫£ API endpoints v·ªõi examples**
- **Data types v√† validation**
- **Error handling**
- **Best practices**

---

## üîê AUTHENTICATION & AUTHORIZATION


### Authentication Methods

#### 1. JWT Bearer Token
```javascript
// Headers cho authenticated requests
{
  "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

#### 2. Public Endpoints
M·ªôt s·ªë endpoints kh√¥ng c·∫ßn authentication (ƒë√°nh d·∫•u `üåç PUBLIC`)

### User Roles
- **`user`**: Ng∆∞·ªùi d√πng th∆∞·ªùng
- **`streamer`**: Ng∆∞·ªùi ph√°t tr·ª±c ti·∫øp
- **`admin`**: Qu·∫£n tr·ªã vi√™n
- **`superadmin`**: Qu·∫£n tr·ªã vi√™n c·∫•p cao
- **`staff`**: Nh√¢n vi√™n h·ªó tr·ª£
- **`moderator`**: ƒêi·ªÅu h√†nh vi√™n

---

## üîë AUTH MODULE

### 1. ƒêƒÉng k√Ω t√†i kho·∫£n
```http
POST /auth/register
```
**üåç PUBLIC** | **Content-Type**: `application/json`

**Request Body**:
```json
{
  "name": "John Doe",
  "email": "john@example.com",
  "password": "password123"
}
```

**Validation Rules**:
- `name`: String, 2-50 k√Ω t·ª±
- `email`: Email h·ª£p l·ªá, unique
- `password`: T·ªëi thi·ªÉu 6 k√Ω t·ª±

**Response (201)**:
```json
{
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": "64f8c9b2e1234567890abcde",
    "name": "John Doe",
    "email": "john@example.com",
    "role": "user"
  }
}
```

**Errors**:
- `400`: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
- `409`: Email ƒë√£ t·ªìn t·∫°i

### 2. ƒêƒÉng nh·∫≠p
```http
POST /auth/login
```
**üåç PUBLIC** | **Content-Type**: `application/json`

**Request Body**:
```json
{
  "email": "john@example.com",
  "password": "password123"
}
```

**Response (200)**:
```json
{
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": "64f8c9b2e1234567890abcde",
    "name": "John Doe",
    "email": "john@example.com",
    "role": "user"
  }
}
```

**Errors**:
- `401`: Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng

### 3. L√†m m·ªõi token
```http
POST /auth/refresh-token
```
**üåç PUBLIC** | **Content-Type**: `application/json`

**Request Body**:
```json
{
  "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

**Response (200)**:
```json
{
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

### 4. L·∫•y th√¥ng tin profile
```http
GET /auth/profile
```
**üîí AUTHENTICATED**

**Response (200)**:
```json
{
  "id": "64f8c9b2e1234567890abcde",
  "name": "John Doe",
  "email": "john@example.com",
  "role": "user",
  "createdAt": "2023-09-07T10:30:00.000Z"
}
```

### 5. L·∫•y t√†i kho·∫£n test (Development Only)
```http
GET /auth/test-accounts
```
**üåç PUBLIC**

**Response (200)**:
```json
{
  "status": "success",
  "message": "Test accounts for development",
  "data": [
    {
      "email": "admin@test.com",
      "password": "Admin123",
      "role": "admin",
      "description": "Admin user with full permissions"
    },
    {
      "email": "streamer@test.com",
      "password": "Stream123",
      "role": "streamer",
      "description": "Streamer user for live streaming features"
    }
  ]
}
```

---

## üë§ USER MODULE

### 1. L·∫•y th√¥ng tin profile hi·ªán t·∫°i
```http
GET /user/me
```
**üîí AUTHENTICATED**

**Response (200)**:
```json
{
  "_id": "507f1f77bcf86cd799439011",
  "email": "user@example.com",
  "name": "John Doe",
  "avatar": "https://example.com/avatar.jpg",
  "role": "user",
  "isActive": true,
  "createdAt": "2023-12-01T00:00:00.000Z",
  "updatedAt": "2023-12-01T00:00:00.000Z"
}
```

### 2. C·∫≠p nh·∫≠t th√¥ng tin profile
```http
PUT /user/profile
```
**üîí AUTHENTICATED** | **Content-Type**: `application/json`

**Request Body**:
```json
{
  "name": "John Updated",
  "avatar": "https://example.com/new-avatar.jpg"
}
```

**Validation Rules**:
- `name`: String, 2-50 k√Ω t·ª± (optional)
- `avatar`: URL h·ª£p l·ªá (optional)

### 3. ƒê·ªïi m·∫≠t kh·∫©u
```http
PUT /user/change-password
```
**üîí AUTHENTICATED** | **Content-Type**: `application/json`

**Request Body**:
```json
{
  "currentPassword": "oldpassword123",
  "newPassword": "newpassword123"
}
```

**Validation Rules**:
- `currentPassword`: String, required
- `newPassword`: String, t·ªëi thi·ªÉu 6 k√Ω t·ª±

---

## üéÅ GIFT MODULE

### 1. L·∫•y t·∫•t c·∫£ qu√† t·∫∑ng
```http
GET /gifts?page=1&limit=10&category=reward&status=active&rarity=common
```
**üåç PUBLIC**

**Query Parameters**:
- `page`: Number (default: 1)
- `limit`: Number (default: 10, max: 100)
- `category`: `reward` | `premium`
- `status`: `active` | `inactive`
- `rarity`: `common` | `rare` | `epic` | `legendary`

**Response (200)**:
```json
{
  "gifts": [
    {
      "_id": "507f1f77bcf86cd799439011",
      "name": "Hoa H·ªìng",
      "description": "B√¥ng hoa h·ªìng ƒë·ªè t∆∞·ª£ng tr∆∞ng cho t√¨nh y√™u",
      "iconUrl": "https://example.com/icons/rose.png",
      "price": 1000,
      "category": "reward",
      "status": "active",
      "rarity": "common",
      "maxClaimsPerUser": 1,
      "sortOrder": 1,
      "canSendInLive": true,
      "totalClaimed": 150,
      "totalSent": 0,
      "totalRevenue": 0,
      "createdAt": "2023-12-01T00:00:00.000Z",
      "updatedAt": "2023-12-01T00:00:00.000Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 25,
    "totalPages": 3
  }
}
```

### 2. L·∫•y qu√† t·∫∑ng mi·ªÖn ph√≠
```http
GET /gifts/rewards?page=1&limit=10
```
**üåç PUBLIC**

**Response**: T∆∞∆°ng t·ª± nh∆∞ tr√™n, ch·ªâ tr·∫£ v·ªÅ gifts c√≥ `price: 0`

### 3. L·∫•y qu√† t·∫∑ng tr·∫£ ph√≠
```http
GET /gifts/premium?page=1&limit=10
```
**üåç PUBLIC**

**Response**: T∆∞∆°ng t·ª± nh∆∞ tr√™n, ch·ªâ tr·∫£ v·ªÅ gifts c√≥ `price > 0`

### 4. L·∫•y chi ti·∫øt qu√† t·∫∑ng
```http
GET /gifts/:id
```
**üåç PUBLIC**

**Response (200)**:
```json
{
  "_id": "507f1f77bcf86cd799439011",
  "name": "Hoa H·ªìng",
  "description": "B√¥ng hoa h·ªìng ƒë·ªè t∆∞·ª£ng tr∆∞ng cho t√¨nh y√™u",
  "iconUrl": "https://example.com/icons/rose.png",
  "price": 0,
  "category": "reward",
  "status": "active",
  "rarity": "common",
  "maxClaimsPerUser": 1,
  "canSendInLive": false,
  "totalClaimed": 150,
  "totalSent": 0,
  "totalRevenue": 0
}
```

### 5. Nh·∫≠n qu√† mi·ªÖn ph√≠
```http
POST /gifts/claim
```
**üîí AUTHENTICATED** | **Content-Type**: `application/json`

**Request Body**:
```json
{
  "giftId": "507f1f77bcf86cd799439011"
}
```

**Response (201)**:
```json
{
  "message": "Gift claimed successfully",
  "gift": {
    "_id": "507f1f77bcf86cd799439011",
    "name": "Hoa H·ªìng",
    "description": "B√¥ng hoa h·ªìng ƒë·ªè t∆∞·ª£ng tr∆∞ng cho t√¨nh y√™u",
    "price": 0,
    "category": "reward"
  },
  "transaction": {
    "_id": "507f1f77bcf86cd799439012",
    "type": "claim",
    "status": "completed",
    "quantity": 1,
    "totalAmount": 0
  }
}
```

**Errors**:
- `400`: Qu√† kh√¥ng th·ªÉ nh·∫≠n ho·∫∑c ƒë√£ nh·∫≠n r·ªìi
- `404`: Qu√† kh√¥ng t·ªìn t·∫°i

### 6. G·ª≠i qu√† tr·∫£ ph√≠
```http
POST /gifts/send
```
**üîí AUTHENTICATED** | **Content-Type**: `application/json`

**Request Body**:
```json
{
  "giftId": "507f1f77bcf86cd799439011",
  "receiverId": "507f1f77bcf86cd799439013",
  "streamId": "507f1f77bcf86cd799439014",
  "quantity": 1,
  "message": "Great stream!"
}
```

**Validation Rules**:
- `giftId`: ObjectId, required
- `receiverId`: ObjectId, required
- `streamId`: ObjectId, optional
- `quantity`: Number, min: 1, max: 100
- `message`: String, max: 200 k√Ω t·ª±

**Response (201)**:
```json
{
  "message": "Gift sent successfully",
  "gift": {
    "_id": "507f1f77bcf86cd799439011",
    "name": "Hoa H·ªìng",
    "price": 1000
  },
  "transaction": {
    "_id": "507f1f77bcf86cd799439012",
    "type": "send",
    "status": "completed",
    "quantity": 1,
    "totalAmount": 1000
  },
  "walletTransaction": {
    "_id": "507f1f77bcf86cd799439015",
    "type": "GIFT",
    "amount": -1000,
    "description": "Sent gift: Hoa H·ªìng"
  }
}
```

**Errors**:
- `400`: S·ªë d∆∞ kh√¥ng ƒë·ªß, qu√† kh√¥ng th·ªÉ g·ª≠i
- `404`: Qu√† ho·∫∑c ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i

### 7. L·ªãch s·ª≠ qu√† ƒë√£ g·ª≠i
```http
GET /gifts/history/sent?page=1&limit=10
```
**üîí AUTHENTICATED**

**Response (200)**:
```json
{
  "transactions": [
    {
      "_id": "507f1f77bcf86cd799439012",
      "gift": {
        "_id": "507f1f77bcf86cd799439011",
        "name": "Hoa H·ªìng",
        "iconUrl": "https://example.com/icons/rose.png"
      },
      "receiver": {
        "_id": "507f1f77bcf86cd799439013",
        "name": "Jane Doe"
      },
      "quantity": 1,
      "totalAmount": 1000,
      "message": "Great stream!",
      "createdAt": "2023-12-01T00:00:00.000Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 5,
    "totalPages": 1
  }
}
```

### 8. L·ªãch s·ª≠ qu√† ƒë√£ nh·∫≠n
```http
GET /gifts/history/received?page=1&limit=10
```
**üîí AUTHENTICATED**

**Response**: T∆∞∆°ng t·ª± nh∆∞ tr√™n, nh∆∞ng t·ª´ g√≥c ƒë·ªô ng∆∞·ªùi nh·∫≠n

---

## üí∞ WALLET MODULE

### 1. L·∫•y th√¥ng tin v√≠
```http
GET /wallet/balance
```
**üîí AUTHENTICATED**

**Response (200)**:
```json
{
  "balance": 150000,
  "currency": "VND",
  "lastUpdated": "2023-12-01T00:00:00.000Z"
}
```

### 2. Y√™u c·∫ßu n·∫°p ti·ªÅn
```http
POST /wallet/topup
```
**üîí AUTHENTICATED** | **Content-Type**: `application/json`

**Request Body**:
```json
{
  "amount": 100000,
  "note": "N·∫°p ti·ªÅn cho t√†i kho·∫£n"
}
```

**Validation Rules**:
- `amount`: Number, min: 10000, max: 10000000
- `note`: String, max: 500 k√Ω t·ª±

**Response (201)**:
```json
{
  "message": "Topup request created successfully",
  "transaction": {
    "_id": "507f1f77bcf86cd799439011",
    "type": "TOPUP",
    "amount": 100000,
    "status": "pending",
    "description": "Y√™u c·∫ßu n·∫°p ti·ªÅn th·ªß c√¥ng",
    "note": "N·∫°p ti·ªÅn cho t√†i kho·∫£n",
    "createdAt": "2023-12-01T00:00:00.000Z"
  }
}
```

### 3. Y√™u c·∫ßu r√∫t ti·ªÅn
```http
POST /wallet/withdraw
```
**üîí AUTHENTICATED** | **Content-Type**: `application/json`

**Request Body**:
```json
{
  "amount": 50000,
  "bankAccount": "1234567890",
  "bankName": "Vietcombank",
  "accountHolder": "NGUYEN VAN A",
  "note": "R√∫t ti·ªÅn v·ªÅ t√†i kho·∫£n"
}
```

**Validation Rules**:
- `amount`: Number, min: 50000, max: user balance
- `bankAccount`: String, required
- `bankName`: String, required
- `accountHolder`: String, required
- `note`: String, max: 500 k√Ω t·ª±

**Response (201)**:
```json
{
  "message": "Withdraw request created successfully",
  "transaction": {
    "_id": "507f1f77bcf86cd799439011",
    "type": "WITHDRAW",
    "amount": 50000,
    "status": "pending",
    "description": "Y√™u c·∫ßu r√∫t ti·ªÅn",
    "bankAccount": "1234567890",
    "bankName": "Vietcombank",
    "accountHolder": "NGUYEN VAN A",
    "createdAt": "2023-12-01T00:00:00.000Z"
  }
}
```

### 4. L·ªãch s·ª≠ giao d·ªãch
```http
GET /wallet/transactions?page=1&limit=10&type=TOPUP&status=approved
```
**üîí AUTHENTICATED**

**Query Parameters**:
- `page`: Number (default: 1)
- `limit`: Number (default: 10)
- `type`: `TOPUP` | `WITHDRAW` | `GIFT` | `REWARD` | `REFERRAL`
- `status`: `pending` | `approved` | `rejected` | `completed` | `failed` | `cancelled`

**Response (200)**:
```json
{
  "transactions": [
    {
      "_id": "507f1f77bcf86cd799439011",
      "type": "TOPUP",
      "amount": 100000,
      "status": "approved",
      "description": "Y√™u c·∫ßu n·∫°p ti·ªÅn th·ªß c√¥ng",
      "note": "N·∫°p ti·ªÅn cho t√†i kho·∫£n",
      "adminNote": "ƒê√£ duy·ªát y√™u c·∫ßu n·∫°p ti·ªÅn",
      "createdAt": "2023-12-01T00:00:00.000Z",
      "updatedAt": "2023-12-01T01:00:00.000Z"
    }
  ],
  "pagination": {
    "current": 1,
    "limit": 10,
    "total": 1,
    "totalPages": 1
  }
}
```

---

## üì∫ LIVE MODULE

### 1. L·∫•y danh s√°ch streams ƒëang LIVE
```http
GET /stream?page=1&limit=10&status=live
```
**üåç PUBLIC**

**Query Parameters**:
- `page`: Number (default: 1)
- `limit`: Number (default: 10)
- `status`: `live` | `ended` | `scheduled`

**Response (200)**:
```json
{
  "streams": [
    {
      "_id": "507f1f77bcf86cd799439011",
      "title": "Gaming Stream - Playing Valorant",
      "description": "Ch∆°i game Valorant c√πng v·ªõi b·∫°n b√®!",
      "thumbnailUrl": "https://example.com/thumbnails/stream-123.jpg",
      "status": "live",
      "viewerCount": 150,
      "startedAt": "2023-12-01T10:00:00.000Z",
      "streamer": {
        "_id": "507f1f77bcf86cd799439012",
        "name": "John Streamer",
        "avatar": "https://example.com/avatars/john.jpg"
      },
      "roomId": "room_507f1f77bcf86cd799439011",
      "createdAt": "2023-12-01T10:00:00.000Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 5,
    "totalPages": 1
  }
}
```

### 2. L·∫•y chi ti·∫øt stream
```http
GET /stream/:id
```
**üåç PUBLIC**

**Response (200)**:
```json
{
  "_id": "507f1f77bcf86cd799439011",
  "title": "Gaming Stream - Playing Valorant",
  "description": "Ch∆°i game Valorant c√πng v·ªõi b·∫°n b√®!",
  "thumbnailUrl": "https://example.com/thumbnails/stream-123.jpg",
  "status": "live",
  "viewerCount": 150,
  "startedAt": "2023-12-01T10:00:00.000Z",
  "endedAt": null,
  "streamer": {
    "_id": "507f1f77bcf86cd799439012",
    "name": "John Streamer",
    "avatar": "https://example.com/avatars/john.jpg"
  },
  "roomId": "room_507f1f77bcf86cd799439011",
  "metadata": {
    "category": "gaming",
    "tags": ["valorant", "fps", "competitive"]
  }
}
```

### 3. L·∫•y token viewer ƒë·ªÉ xem stream
```http
POST /stream/viewer-token
```
**üîí AUTHENTICATED** | **Content-Type**: `application/json`

**Request Body**:
```json
{
  "streamId": "507f1f77bcf86cd799439011",
  "identity": "viewer_john_doe"
}
```

**Response (200)**:
```json
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "wsUrl": "wss://wslive.loltips.net",
  "roomId": "room_507f1f77bcf86cd799439011",
  "identity": "viewer_john_doe",
  "expiresAt": "2023-12-01T11:00:00.000Z"
}
```

### 4. B·∫Øt ƒë·∫ßu livestream (Streamer)
```http
POST /stream
```
**üîí AUTHENTICATED** | **Role**: `streamer`, `admin`

**Request Body**:
```json
{
  "title": "Gaming Stream - Playing Valorant",
  "description": "Ch∆°i game Valorant c√πng v·ªõi b·∫°n b√®!",
  "thumbnailUrl": "https://example.com/thumbnails/stream-123.jpg",
  "category": "gaming",
  "tags": ["valorant", "fps", "competitive"]
}
```

**Response (201)**:
```json
{
  "message": "Stream created successfully",
  "stream": {
    "_id": "507f1f77bcf86cd799439011",
    "title": "Gaming Stream - Playing Valorant",
    "status": "live",
    "roomId": "room_507f1f77bcf86cd799439011"
  },
  "streamerToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "wsUrl": "wss://wslive.loltips.net"
}
```

### 5. K·∫øt th√∫c livestream (Streamer)
```http
PATCH /stream/:id/stop
```
**üîí AUTHENTICATED** | **Role**: `streamer`, `admin`

**Response (200)**:
```json
{
  "message": "Stream stopped successfully",
  "stream": {
    "_id": "507f1f77bcf86cd799439011",
    "status": "ended",
    "endedAt": "2023-12-01T12:00:00.000Z",
    "duration": 7200
  }
}
```

### 6. C·∫≠p nh·∫≠t th√¥ng tin stream
```http
PATCH /stream/:id
```
**üîí AUTHENTICATED** | **Role**: `streamer`, `admin`

**Request Body**:
```json
{
  "title": "Updated Gaming Stream",
  "description": "Updated description",
  "thumbnailUrl": "https://example.com/new-thumbnail.jpg"
}
```

---

## üí¨ CHAT MODULE

### 1. G·ª≠i tin nh·∫Øn vƒÉn b·∫£n
```http
POST /chat/send
```
**üîí AUTHENTICATED** | **Content-Type**: `application/json`

**Request Body**:
```json
{
  "roomId": "room_livestream_123",
  "message": "Hello everyone!",
  "isSupport": false,
  "sentBy": "user"
}
```

**Validation Rules**:
- `roomId`: String, required
- `message`: String, 1-500 k√Ω t·ª±
- `isSupport`: Boolean, default: false
- `sentBy`: `user` | `admin`

**Response (201)**:
```json
{
  "success": true,
  "message": "Message sent successfully",
  "data": {
    "_id": "507f1f77bcf86cd799439011",
    "roomId": "room_livestream_123",
    "senderId": "507f1f77bcf86cd799439012",
    "senderName": "John Doe",
    "message": "Hello everyone!",
    "isSupport": false,
    "sentBy": "user",
    "sentAt": "2023-12-01T00:00:00.000Z"
  }
}
```

### 2. G·ª≠i tin nh·∫Øn h√¨nh ·∫£nh
```http
POST /chat/send-image
```
**üîí AUTHENTICATED** | **Content-Type**: `application/json`

**Request Body**:
```json
{
  "roomId": "room_livestream_123",
  "imageUrl": "https://res.cloudinary.com/demo/image/upload/sample.jpg",
  "isSupport": false,
  "sentBy": "user"
}
```

**Validation Rules**:
- `imageUrl`: URL h·ª£p l·ªá, t·ª´ domain ƒë∆∞·ª£c h·ªó tr·ª£
- H·ªó tr·ª£: `.jpg`, `.jpeg`, `.png`, `.webp`, `.gif`
- Max length: 500 k√Ω t·ª±

### 3. L·∫•y tin nh·∫Øn theo room
```http
GET /chat/room/:roomId?cursor=&limit=20&order=desc
```
**üîí AUTHENTICATED**

**Query Parameters**:
- `cursor`: String, ObjectId ƒë·ªÉ pagination
- `limit`: Number, max: 100
- `order`: `asc` | `desc`

**Response (200)**:
```json
{
  "messages": [
    {
      "_id": "507f1f77bcf86cd799439011",
      "roomId": "room_livestream_123",
      "senderId": "507f1f77bcf86cd799439012",
      "senderName": "John Doe",
      "message": "Hello everyone!",
      "messageType": "text",
      "isSupport": false,
      "sentBy": "user",
      "sentAt": "2023-12-01T00:00:00.000Z"
    }
  ],
  "pagination": {
    "hasMore": true,
    "nextCursor": "507f1f77bcf86cd799439010"
  }
}
```

### 4. L·ªãch s·ª≠ chat support c·ªßa t√¥i
```http
GET /chat/support/me?cursor=&limit=20&order=desc
```
**üîí AUTHENTICATED**

**Response**: T∆∞∆°ng t·ª± nh∆∞ tr√™n, roomId = `support_{userId}`

---

## üîî NOTIFICATION MODULE

### 1. L·∫•y th√¥ng b√°o c·ªßa t√¥i
```http
GET /notification/me?page=1&limit=10&type=gift&isRead=false
```
**üîí AUTHENTICATED**

**Query Parameters**:
- `page`: Number (default: 1)
- `limit`: Number (default: 10)
- `type`: `gift` | `system` | `stream` | `wallet`
- `isRead`: Boolean

**Response (200)**:
```json
{
  "notifications": [
    {
      "_id": "507f1f77bcf86cd799439011",
      "type": "gift",
      "title": "B·∫°n nh·∫≠n ƒë∆∞·ª£c qu√†!",
      "message": "John Doe ƒë√£ g·ª≠i cho b·∫°n Hoa H·ªìng",
      "isRead": false,
      "data": {
        "giftId": "507f1f77bcf86cd799439012",
        "senderId": "507f1f77bcf86cd799439013",
        "amount": 1000
      },
      "createdAt": "2023-12-01T00:00:00.000Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 5,
    "totalPages": 1
  }
}
```

### 2. ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
```http
PATCH /notification/:id/read
```
**üîí AUTHENTICATED**

**Response (200)**:
```json
{
  "message": "Notification marked as read",
  "notification": {
    "_id": "507f1f77bcf86cd799439011",
    "isRead": true,
    "readAt": "2023-12-01T00:00:00.000Z"
  }
}
```

### 3. ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
```http
PATCH /notification/mark-all-read
```
**üîí AUTHENTICATED**

**Response (200)**:
```json
{
  "message": "All notifications marked as read",
  "modifiedCount": 5
}
```

### 4. S·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
```http
GET /notification/unread-count
```
**üîí AUTHENTICATED**

**Response (200)**:
```json
{
  "unreadCount": 3
}
```

---

## üéØ REFERRAL MODULE

### 1. L·∫•y m√£ gi·ªõi thi·ªáu
```http
GET /referral/code
```
**üîí AUTHENTICATED**

**Response (200)**:
```json
{
  "code": "REF123456",
  "url": "https://livestream.com/register?ref=REF123456",
  "totalReferrals": 5,
  "totalEarnings": 50000
}
```

### 2. T·∫°o m√£ gi·ªõi thi·ªáu m·ªõi
```http
POST /referral/generate
```
**üîí AUTHENTICATED**

**Response (201)**:
```json
{
  "code": "REF789012",
  "url": "https://livestream.com/register?ref=REF789012",
  "message": "New referral code generated"
}
```

### 3. Th·ªëng k√™ gi·ªõi thi·ªáu
```http
GET /referral/stats
```
**üîí AUTHENTICATED**

**Response (200)**:
```json
{
  "totalReferrals": 10,
  "totalEarnings": 100000,
  "thisMonthReferrals": 3,
  "thisMonthEarnings": 30000,
  "referralHistory": [
    {
      "referredUser": "Jane Doe",
      "registeredAt": "2023-12-01T00:00:00.000Z",
      "earnings": 10000
    }
  ]
}
```

---

## ‚öôÔ∏è SYSTEM MODULE

### 1. L·∫•y c·∫•u h√¨nh h·ªá th·ªëng
```http
GET /system/config
```
**üîí AUTHENTICATED**

**Response (200)**:
```json
{
  "status": "success",
  "data": {
    "maintenanceMode": false,
    "allowRegistration": true,
    "maxFileSize": 10485760,
    "supportedImageTypes": ["jpg", "jpeg", "png", "gif", "webp"],
    "supportedVideoTypes": ["mp4", "webm", "ogg"],
    "apiVersion": "1.0.0",
    "environment": "development",
    "domains": {
      "frontendUrl": "http://localhost:3001",
      "apiDomain": "http://localhost:3000",
      "socketDomain": "http://localhost:3002",
      "livekitWsUrl": "wss://wslive.loltips.net"
    }
  }
}
```

### 2. Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng
```http
GET /system/health
```
**üîí AUTHENTICATED**

**Response (200)**:
```json
{
  "status": "healthy",
  "timestamp": "2023-12-01T00:00:00.000Z",
  "services": {
    "database": "connected",
    "redis": "connected",
    "livekit": "connected"
  },
  "uptime": 3600
}
```

---

## üîß ERROR HANDLING

### HTTP Status Codes

| Code | Meaning | Description |
|------|---------|-------------|
| 200 | OK | Request th√†nh c√¥ng |
| 201 | Created | T·∫°o resource th√†nh c√¥ng |
| 400 | Bad Request | D·ªØ li·ªáu request kh√¥ng h·ª£p l·ªá |
| 401 | Unauthorized | Ch∆∞a x√°c th·ª±c ho·∫∑c token h·∫øt h·∫°n |
| 403 | Forbidden | Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p |
| 404 | Not Found | Resource kh√¥ng t·ªìn t·∫°i |
| 409 | Conflict | Conflict v·ªõi resource hi·ªán t·∫°i |
| 422 | Unprocessable Entity | Validation error |
| 500 | Internal Server Error | L·ªói server |

### Error Response Format

```json
{
  "statusCode": 400,
  "message": "Validation failed",
  "error": "Bad Request",
  "details": [
    {
      "field": "email",
      "message": "Email must be a valid email address"
    }
  ]
}
```

### Common Error Messages

```json
// Authentication errors
{
  "statusCode": 401,
  "message": "Authentication failed",
  "error": "Unauthorized"
}

// Validation errors
{
  "statusCode": 400,
  "message": "Validation failed",
  "error": "Bad Request",
  "details": [
    {
      "field": "password",
      "message": "Password must be at least 6 characters long"
    }
  ]
}

// Permission errors
{
  "statusCode": 403,
  "message": "Insufficient permissions",
  "error": "Forbidden"
}

// Not found errors
{
  "statusCode": 404,
  "message": "Resource not found",
  "error": "Not Found"
}
```

---

## üöÄ BEST PRACTICES

### 1. Authentication
```javascript
// L∆∞u token trong localStorage ho·∫∑c secure cookie
localStorage.setItem('accessToken', response.accessToken);
localStorage.setItem('refreshToken', response.refreshToken);

// Th√™m token v√†o headers
const headers = {
  'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
  'Content-Type': 'application/json'
};
```

### 2. Error Handling
```javascript
try {
  const response = await fetch('/api/user/me', {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });
  
  if (!response.ok) {
    if (response.status === 401) {
      // Token h·∫øt h·∫°n, l√†m m·ªõi token
      await refreshToken();
      // Retry request
    }
    throw new Error(`HTTP ${response.status}`);
  }
  
  const data = await response.json();
  return data;
} catch (error) {
  console.error('API Error:', error);
  throw error;
}
```

### 3. Pagination
```javascript
// S·ª≠ d·ª•ng pagination cho lists
const getGifts = async (page = 1, limit = 10) => {
  const response = await fetch(`/api/gifts?page=${page}&limit=${limit}`);
  const data = await response.json();
  
  return {
    items: data.gifts,
    pagination: data.pagination
  };
};
```

### 4. Real-time Updates
```javascript
// K·∫øt n·ªëi WebSocket cho real-time updates
const socket = io('ws://localhost:3002');

socket.on('new_message', (message) => {
  // C·∫≠p nh·∫≠t UI v·ªõi tin nh·∫Øn m·ªõi
  updateChatUI(message);
});

socket.on('gift_received', (gift) => {
  // Hi·ªÉn th·ªã animation nh·∫≠n qu√†
  showGiftAnimation(gift);
});
```

### 5. File Upload
```javascript
// Upload file tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn h√¨nh ·∫£nh
const uploadImage = async (file) => {
  const formData = new FormData();
  formData.append('image', file);
  
  const response = await fetch('/api/upload/image', {
    method: 'POST',
    body: formData,
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });
  
  const data = await response.json();
  return data.imageUrl;
};

// Sau ƒë√≥ g·ª≠i tin nh·∫Øn v·ªõi imageUrl
const sendImageMessage = async (roomId, imageUrl) => {
  await fetch('/api/chat/send-image', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      roomId,
      imageUrl,
      isSupport: false,
      sentBy: 'user'
    })
  });
};
```

---

## üì± EXAMPLE CLIENT IMPLEMENTATIONS

### React Example
```jsx
import React, { useState, useEffect } from 'react';

const GiftList = () => {
  const [gifts, setGifts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchGifts();
  }, []);

  const fetchGifts = async () => {
    try {
      const response = await fetch('/api/gifts?category=premium');
      if (!response.ok) throw new Error('Failed to fetch gifts');
      
      const data = await response.json();
      setGifts(data.gifts);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const sendGift = async (giftId, receiverId) => {
    try {
      const token = localStorage.getItem('accessToken');
      const response = await fetch('/api/gifts/send', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          giftId,
          receiverId,
          quantity: 1,
          message: 'Great stream!'
        })
      });

      if (!response.ok) throw new Error('Failed to send gift');
      
      const data = await response.json();
      alert('Gift sent successfully!');
    } catch (err) {
      alert(`Error: ${err.message}`);
    }
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div>
      <h2>Premium Gifts</h2>
      {gifts.map(gift => (
        <div key={gift._id} className="gift-item">
          <img src={gift.iconUrl} alt={gift.name} />
          <h3>{gift.name}</h3>
          <p>{gift.description}</p>
          <span>{gift.price} VND</span>
          <button onClick={() => sendGift(gift._id, 'receiverId')}>
            Send Gift
          </button>
        </div>
      ))}
    </div>
  );
};
```

### JavaScript Vanilla Example
```javascript
// API Client Class
class LivestreamAPI {
  constructor(baseURL = 'http://localhost:3000') {
    this.baseURL = baseURL;
    this.token = localStorage.getItem('accessToken');
  }

  async request(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    const config = {
      headers: {
        'Content-Type': 'application/json',
        ...(this.token && { 'Authorization': `Bearer ${this.token}` })
      },
      ...options
    };

    try {
      const response = await fetch(url, config);
      
      if (!response.ok) {
        if (response.status === 401) {
          await this.refreshToken();
          // Retry with new token
          config.headers['Authorization'] = `Bearer ${this.token}`;
          return fetch(url, config);
        }
        throw new Error(`HTTP ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('API Request failed:', error);
      throw error;
    }
  }

  async login(email, password) {
    const data = await this.request('/auth/login', {
      method: 'POST',
      body: JSON.stringify({ email, password })
    });

    this.token = data.accessToken;
    localStorage.setItem('accessToken', data.accessToken);
    localStorage.setItem('refreshToken', data.refreshToken);
    
    return data;
  }

  async getGifts(params = {}) {
    const queryString = new URLSearchParams(params).toString();
    return this.request(`/gifts?${queryString}`);
  }

  async sendGift(giftData) {
    return this.request('/gifts/send', {
      method: 'POST',
      body: JSON.stringify(giftData)
    });
  }

  async getWalletBalance() {
    return this.request('/wallet/balance');
  }

  async refreshToken() {
    const refreshToken = localStorage.getItem('refreshToken');
    if (!refreshToken) {
      throw new Error('No refresh token available');
    }

    const data = await this.request('/auth/refresh-token', {
      method: 'POST',
      body: JSON.stringify({ refreshToken })
    });

    this.token = data.accessToken;
    localStorage.setItem('accessToken', data.accessToken);
    localStorage.setItem('refreshToken', data.refreshToken);
  }
}

// Usage
const api = new LivestreamAPI();

// Login
await api.login('user@example.com', 'password123');

// Get gifts
const gifts = await api.getGifts({ category: 'premium', limit: 20 });

// Send gift
await api.sendGift({
  giftId: '507f1f77bcf86cd799439011',
  receiverId: '507f1f77bcf86cd799439013',
  quantity: 1,
  message: 'Great stream!'
});
```

---

## üîó WEBSOCKET EVENTS

### Connection
```javascript
const socket = io('ws://localhost:3002', {
  auth: {
    token: localStorage.getItem('accessToken')
  }
});
```

### Available Events

#### 1. Chat Events
```javascript
// G·ª≠i tin nh·∫Øn
socket.emit('send_message', {
  roomId: 'room_123',
  message: 'Hello!',
  type: 'text'
});

// Nh·∫≠n tin nh·∫Øn m·ªõi
socket.on('new_message', (data) => {
  console.log('New message:', data);
});
```

#### 2. Gift Events
```javascript
// G·ª≠i qu√†
socket.emit('send_gift', {
  giftId: '507f1f77bcf86cd799439011',
  receiverId: '507f1f77bcf86cd799439013',
  streamId: '507f1f77bcf86cd799439014',
  quantity: 1
});

// Nh·∫≠n qu√†
socket.on('gift_received', (data) => {
  console.log('Gift received:', data);
  // Hi·ªÉn th·ªã animation
});
```

#### 3. Stream Events
```javascript
// Stream b·∫Øt ƒë·∫ßu
socket.on('stream_started', (data) => {
  console.log('New stream:', data);
});

// Stream k·∫øt th√∫c
socket.on('stream_ended', (data) => {
  console.log('Stream ended:', data);
});

// Viewer count update
socket.on('viewer_count_update', (data) => {
  console.log('Viewers:', data.count);
});
```

---

## üìù CHANGELOG

### Version 1.0.0
- Initial API release
- Basic authentication & authorization
- Gift system with unified schema
- Wallet management
- Live streaming with LiveKit
- Real-time chat
- Notification system
- Referral system

---

## üÜò SUPPORT

### Development Team
- **Backend**: Node.js + NestJS + MongoDB
- **Real-time**: Socket.IO + Redis
- **Live Streaming**: LiveKit
- **Documentation**: Swagger UI available at `/api`

